// eslint-disable
// @ts-nocheck
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
  async showWindow() : Promise<void> {
    await TAURI_INVOKE("show_window");
  },
  async runInject(trainerSettings: TrainerSettings) : Promise<Result<string, string>> {
    try {
      return { status: "ok", data: await TAURI_INVOKE("run_inject", { trainerSettings }) };
    } catch (e) {
      if(e instanceof Error) throw e;
      else return { status: "error", error: e  as any };
    }
  },
  async readRdConfig() : Promise<string> {
    return await TAURI_INVOKE("read_rd_config");
  },
  async writeRdConfig(rdConfig: RdConfig) : Promise<Result<null, string>> {
    try {
      return { status: "ok", data: await TAURI_INVOKE("write_rd_config", { rdConfig }) };
    } catch (e) {
      if(e instanceof Error) throw e;
      else return { status: "error", error: e  as any };
    }
  },
  async openLogFile() : Promise<Result<null, string>> {
    try {
      return { status: "ok", data: await TAURI_INVOKE("open_log_file") };
    } catch (e) {
      if(e instanceof Error) throw e;
      else return { status: "error", error: e  as any };
    }
  },
  async openPlayerTypes() : Promise<Result<null, string>> {
    try {
      return { status: "ok", data: await TAURI_INVOKE("open_player_types") };
    } catch (e) {
      if(e instanceof Error) throw e;
      else return { status: "error", error: e  as any };
    }
  },
  async closeOthers() : Promise<Result<null, string>> {
    try {
      return { status: "ok", data: await TAURI_INVOKE("close_others") };
    } catch (e) {
      if(e instanceof Error) throw e;
      else return { status: "error", error: e  as any };
    }
  },
  async getLogData() : Promise<string[]> {
    return await TAURI_INVOKE("get_log_data");
  },
  async writeLanguage(language: string) : Promise<Result<null, string>> {
    try {
      return { status: "ok", data: await TAURI_INVOKE("write_language", { language }) };
    } catch (e) {
      if(e instanceof Error) throw e;
      else return { status: "error", error: e  as any };
    }
  },
  async writeDetailConfig(detailConfig: DetailConfig) : Promise<Result<null, string>> {
    try {
      return { status: "ok", data: await TAURI_INVOKE("write_detail_config", { detailConfig }) };
    } catch (e) {
      if(e instanceof Error) throw e;
      else return { status: "error", error: e  as any };
    }
  },
  async readDetailConfig() : Promise<Result<([string, string])[], string>> {
    try {
      return { status: "ok", data: await TAURI_INVOKE("read_detail_config") };
    } catch (e) {
      if(e instanceof Error) throw e;
      else return { status: "error", error: e  as any };
    }
  },
  async setFirstPlayerType(character: string) : Promise<Result<null, string>> {
    try {
      return { status: "ok", data: await TAURI_INVOKE("set_first_player_type", { character }) };
    } catch (e) {
      if(e instanceof Error) throw e;
      else return { status: "error", error: e  as any };
    }
  },
  async getFirstPlayerType() : Promise<Result<string, string>> {
    try {
      return { status: "ok", data: await TAURI_INVOKE("get_first_player_type") };
    } catch (e) {
      if(e instanceof Error) throw e;
      else return { status: "error", error: e  as any };
    }
  },
  async checkForUpdates() : Promise<Result<UpdateInfo, string>> {
    try {
      return { status: "ok", data: await TAURI_INVOKE("check_for_updates") };
    } catch (e) {
      if(e instanceof Error) throw e;
      else return { status: "error", error: e  as any };
    }
  },
  async downloadAndExtract(url: string, onEvent: TAURI_CHANNEL<DownloadEvent>) : Promise<Result<DownloadResult, string>> {
    try {
      return { status: "ok", data: await TAURI_INVOKE("download_and_extract", { url, onEvent }) };
    } catch (e) {
      if(e instanceof Error) throw e;
      else return { status: "error", error: e  as any };
    }
  },
  async cancelDownload(id: string) : Promise<boolean> {
    return await TAURI_INVOKE("cancel_download", { id });
  },
  async getVersion() : Promise<string> {
    return await TAURI_INVOKE("get_version");
  },
  async relaunch() : Promise<void> {
    await TAURI_INVOKE("relaunch");
  },
  async killExit1() : Promise<string> {
    return await TAURI_INVOKE("kill_exit_1");
  }
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type DetailConfig = { renderDistance: number | null; groundDetail: number | null }
export type DownloadEvent = { event: "downloadProgress"; data: { progress: number; progressTotal: number; total: number; transferSpeed: number } } | { event: "token"; data: { token: string } } | { event: "downloadCancelled" }
export type DownloadResult = { installed: boolean }
export type RdConfig = { apiName: string; width: number; height: number; depth: number; cardId: number; fullscreen: boolean }
export type TAURI_CHANNEL<TSend> = null
export type TrainerSettings = { use4xFonts: boolean; changeFov: boolean; fovWidth: number | null; fovHeight: number | null; enableLogging: boolean; makeGhostsOpaque: boolean; matchGhostSoundsToCharacter: boolean; disableDirectInput: boolean; enableCustomControls: boolean }
export type UpdateInfo = { currentVersion: string; latestVersion: string }

/** tauri-specta globals **/

import {
  invoke as TAURI_INVOKE,
  Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
  listen: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: null extends T
    ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
    : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
  mappings: Record<keyof T, string>,
) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]> & {
        (handle: __WebviewWindow__): __EventObj__<T[K]>;
      };
    },
    {
      get: (_, event) => {
        const name = mappings[event as keyof T];

        return new Proxy((() => {}) as any, {
          apply: (_, __, [window]: [__WebviewWindow__]) => ({
            listen: (arg: any) => window.listen(name, arg),
            once: (arg: any) => window.once(name, arg),
            emit: (arg: any) => window.emit(name, arg),
          }),
          get: (_, command: keyof __EventObj__<any>) => {
            switch (command) {
              case "listen":
                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
              case "once":
                return (arg: any) => TAURI_API_EVENT.once(name, arg);
              case "emit":
                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
            }
          },
        });
      },
    },
  );
}
