{"version":3,"file":"circleTool-C8Fh_FW7.js","names":["message: string","line: number","input: string","filePath: string","input: string | InputReader","values: Vector[]","properties: Record<string, GameValue>","objects: GameObject[]","_config: Partial<Config>","result: Array<CircleEntry>","point: {x: number, y: number, z: number}","q: Quaternion","q1: Quaternion","q2: Quaternion","num: number","circle: Array<CircleEntry>","outputItems: Array<string>"],"sources":["../../../analyze/src/GameConfigParser/errors.ts","../../../analyze/src/GameConfigParser/input-reader.ts","../../../analyze/src/GameConfigParser/parser.ts","../../../analyze/src/generateCircle/generateCircle.ts","../../../analyze/src/generateCircle/generateCircleToString.ts","../../src/circle/circleTool.ts"],"sourcesContent":["export class ParseError extends Error {\n  line: number;\n    \n  constructor(message: string, line: number) {\n    super(`Line ${line}: ${message}`);\n    this.line = line;\n  }\n}\n","import { ParserPosition } from \"./types\";\n\nexport class InputReader {\n  private input: string;\n  pos: number;\n  line: number;\n\n  constructor(input: string) {\n    this.input = input;\n    this.pos = 0;\n    this.line = 1;\n  }\n\n  current(): string | null {\n    return this.pos < this.input.length ? this.input[this.pos] : null;\n  }\n\n  advance(): InputReader {\n    if (this.current() === \"\\n\") this.line++;\n    this.pos++;\n    return this;\n  }\n\n  skipWhitespace(): InputReader {\n    while (this.current() && /[\\s\\t\\n\\r]/.test(this.current()!)) {\n      this.advance();\n    }\n    return this;\n  }\n\n  getPosition(): ParserPosition {\n    return {\n      pos: this.pos,\n      line: this.line,\n      current: this.current(),\n    };\n  }\n\n  static async fromFile(filePath: string): Promise<InputReader> {\n    // In Node.js:\n    // const fs = require('fs');\n    // const content = fs.readFileSync(filePath, 'utf8');\n    // return new InputReader(content);\n\n    // For browser:\n    const response = await fetch(filePath);\n    const content = await response.text();\n    return new InputReader(content);\n  }\n}\n","import { GameObject, GameValue, Vector, ParserPosition } from \"./types\";\nimport { ParseError } from \"./errors\";\nimport { InputReader } from \"./input-reader\";\n\nexport class GameConfigParser {\n  private reader: InputReader;\n\n  constructor(input: string | InputReader) {\n    this.reader = input instanceof InputReader ? input : new InputReader(input);\n  }\n\n  private parseIdentifier(): string {\n    let result = \"\";\n    while (this.reader.current() && /[a-zA-Z0-9_]/.test(this.reader.current()!)) {\n      result += this.reader.current();\n      this.reader.advance();\n    }\n    if (result.length === 0) {\n      throw new ParseError(\"Expected identifier\", this.reader.line);\n    }\n    return result;\n  }\n\n  private parseString(): string {\n    this.reader.advance(); // Skip opening quote\n    let result = \"\";\n\n    while (this.reader.current() && this.reader.current() !== '\"') {\n      result += this.reader.current();\n      this.reader.advance();\n    }\n\n    if (this.reader.current() !== '\"') {\n      throw new ParseError(\"Unterminated string\", this.reader.line);\n    }\n\n    this.reader.advance(); // Skip closing quote\n    return result;\n  }\n\n  private parseVectorContents(): Vector[] {\n    const values: Vector[] = [];\n    let currentValue = \"\";\n\n    const pushCurrentValue = () => {\n      if (currentValue.trim()) {\n        values.push(currentValue.trim());\n        currentValue = \"\";\n      }\n    };\n\n    while (this.reader.current() && this.reader.current() !== \"}\") {\n      if (this.reader.current() === \"{\") {\n        this.reader.advance();\n        values.push(this.parseVectorContents());\n      } else if (this.reader.current() === \",\") {\n        pushCurrentValue();\n        this.reader.advance();\n      } else if (/[\\s\\t\\n\\r]/.test(this.reader.current()!)) {\n        pushCurrentValue();\n        this.reader.advance();\n      } else {\n        currentValue += this.reader.current();\n        this.reader.advance();\n      }\n    }\n\n    pushCurrentValue();\n\n    if (this.reader.current() === \"}\") {\n      this.reader.advance();\n    } else {\n      throw new ParseError(\"Expected } in vector\", this.reader.line);\n    }\n\n    return values;\n  }\n\n  private parseVector(): Vector {\n    this.reader.advance(); // Skip opening brace\n    return this.parseVectorContents();\n  }\n\n  private parseValue(): GameValue {\n    this.reader.skipWhitespace();\n\n    if (!this.reader.current()) {\n      throw new ParseError(\"Unexpected end of input while parsing value\", this.reader.line);\n    }\n\n    if (this.reader.current() === \"{\") {\n      return this.parseVector();\n    } else if (this.reader.current() === '\"') {\n      return this.parseString();\n    } else {\n      // Parse until semicolon or whitespace\n      let result = \"\";\n      while (this.reader.current() && !/[\\s\\t\\n\\r;]/.test(this.reader.current()!)) {\n        result += this.reader.current();\n        this.reader.advance();\n      }\n      return result;\n    }\n  }\n\n  private parseProperty(): { name: string; value: GameValue } {\n    this.reader.skipWhitespace();\n\n    const name = this.parseIdentifier();\n\n    this.reader.skipWhitespace();\n    if (this.reader.current() !== \"=\") {\n      throw new ParseError(`Expected = after property name \"${name}\"`, this.reader.line);\n    }\n    this.reader.advance();\n\n    const value = this.parseValue();\n\n    // Handle optional semicolon\n    this.reader.skipWhitespace();\n    if (this.reader.current() === \";\") this.reader.advance();\n\n    return { name, value };\n  }\n\n  private parseObject(): GameObject {\n    this.reader.skipWhitespace();\n\n    const name = this.parseIdentifier();\n\n    this.reader.skipWhitespace();\n    if (this.reader.current() !== \"{\") {\n      throw new ParseError(`Expected { after object name \"${name}\"`, this.reader.line);\n    }\n    this.reader.advance();\n\n    const properties: Record<string, GameValue> = {};\n    while (this.reader.current() && this.reader.current() !== \"}\") {\n      const { name: propName, value } = this.parseProperty();\n      properties[propName] = value;\n      this.reader.skipWhitespace();\n    }\n\n    if (this.reader.current() !== \"}\") {\n      throw new ParseError(`Expected } to close object \"${name}\"`, this.reader.line);\n    }\n    this.reader.advance();\n\n    // Handle optional semicolon after closing brace\n    this.reader.skipWhitespace();\n    if (this.reader.current() === \";\") this.reader.advance();\n\n    return {\n      type: name,\n      properties,\n    };\n  }\n\n  public parse(): GameObject[] {\n    const objects: GameObject[] = [];\n\n    // @ts-expect-error it seems okay to do this\n    while (this.reader.pos < this.reader.input.length) {\n      this.reader.skipWhitespace();\n      if (!this.reader.current()) break;\n\n      objects.push(this.parseObject());\n    }\n\n    return objects;\n  }\n\n  public getPosition(): ParserPosition {\n    return this.reader.getPosition();\n  }\n}\n","import { Quaternion } from \"./types\";\n\nexport function generateCircle(\n  _config: Partial<Config> = {}\n): Array<CircleEntry> {\n  const config = {\n    name: \"Audience_4\",\n    count: 10,\n    radius: 90,\n    uniform_scale: 0.2,\n    centerLoc: { x: 248.844, y: -45.5154, z: 1096.15 },\n    quat: { w: 1, x: 0, y: 0, z: 0 },\n    ..._config\n  };\n\n  const result: Array<CircleEntry> = [];\n  \n  for (let i = 0; i < config.count; i++) {\n    // Position around the circle\n    const angle = (i / config.count) * 2 * Math.PI;\n    \n    // Calculate base position in the XY plane\n    const localX = config.radius * Math.cos(angle);\n    const localY = config.radius * Math.sin(angle);\n    const localZ = 0;\n    \n    // Apply quaternion rotation to the offset\n    // Use the base quaternion to rotate the offset points\n    const rotatedOffset = rotatePointByQuaternion(\n      { x: localX, y: localY, z: localZ }, \n      config.quat\n    );\n    \n    // Calculate the facing quaternion (tangential to circle)\n    const facingAngle = angle + Math.PI/2;\n    const zRotQuat = {\n      w: Math.cos(facingAngle / 2),\n      x: 0,\n      y: 0,\n      z: Math.sin(facingAngle / 2)\n    };\n    \n    // Combine the base quaternion with the facing rotation\n    const facingQuat = multiplyQuaternions(config.quat, zRotQuat);\n    \n    // Round values for precision\n    const offset = {\n      x: roundZero(roundThousandth(rotatedOffset.x)),\n      y: roundZero(roundThousandth(rotatedOffset.y)),\n      z: roundZero(roundThousandth(rotatedOffset.z))\n    };\n    \n    const roundedQuat = {\n      w: roundZero(facingQuat.w),\n      x: roundZero(facingQuat.x),\n      y: roundZero(facingQuat.y),\n      z: roundZero(facingQuat.z)\n    };\n    \n    result.push({\n      name: config.name,\n      loc: config.centerLoc,\n      uniform_scale: config.uniform_scale,\n      quat: roundedQuat,\n      offset: offset\n    });\n  }\n\n  return result;\n}\n\n// Rotate a point using a quaternion\nfunction rotatePointByQuaternion(\n  point: {x: number, y: number, z: number}, \n  q: Quaternion\n): {x: number, y: number, z: number} {\n  // Convert point to quaternion form (w=0)\n  const pointQuat = { w: 0, x: point.x, y: point.y, z: point.z };\n  \n  // q * point * q^-1\n  const qInv = {\n    w: q.w,\n    x: -q.x,\n    y: -q.y,\n    z: -q.z\n  };\n  \n  const rotated = multiplyQuaternions(\n    multiplyQuaternions(q, pointQuat),\n    qInv\n  );\n  \n  return { x: rotated.x, y: rotated.y, z: rotated.z };\n}\n\n// Quaternion multiplication function\nfunction multiplyQuaternions(q1: Quaternion, q2: Quaternion): Quaternion {\n  return {\n    w: q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z,\n    x: q1.w * q2.x + q1.x * q2.w + q1.y * q2.z - q1.z * q2.y,\n    y: q1.w * q2.y - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x,\n    z: q1.w * q2.z + q1.x * q2.y - q1.y * q2.x + q1.z * q2.w\n  };\n}\n\n// Round to 3 decimal places (thousandths)\nfunction roundThousandth(num: number): number {\n  return Math.round(num * 1000) / 1000;\n}\n\n// Round very small values to zero\nfunction roundZero(num: number, epsilon = 1e-12): number {\n  return Math.abs(num) < epsilon ? 0 : num;\n}\n\nexport interface CircleEntry {\n  name: string;\n  loc: {x: number, y: number, z: number};\n  quat: {w: number, x: number, y: number, z: number};\n  offset: {x: number, y: number, z: number};\n  uniform_scale: number;\n}\n\ninterface Config {\n  name: string;\n  count: number;\n  radius: number;\n  centerLoc: { x: number, y: number, z: number };\n  quat: Quaternion;\n  uniform_scale: number;\n}","import { CircleEntry } from \"./generateCircle\";\n\nexport function circleToString(circle: Array<CircleEntry>): string {\n  return circle.map((entry) => {\n    return `${entry.name} {\nuniform_scale = ${entry.uniform_scale.toFixed(3)};\nloc = {${entry.loc.x}, ${entry.loc.y}, ${entry.loc.z}};\nlevel_inclusion_mask = -1;\noffset = {${entry.offset.x.toFixed(3)}, ${entry.offset.y.toFixed(3)}, ${entry.offset.z.toFixed(3)}};\nquat = {${entry.quat.w.toFixed(6)}, {${entry.quat.x.toFixed(6)}, ${entry.quat.y.toFixed(6)}, ${entry.quat.z.toFixed(6)}}};\nmelt_height = 0;\n};`}).join(\"\\n\\n\");\n}\n","import { GameConfigParser, circleToString, generateCircle } from \"dat-analyze/src/exports\";\n\ndocument.addEventListener(\"DOMContentLoaded\", function (): void {\n  const generateBtn = document.getElementById(\"generate\") as HTMLButtonElement;\n  const copyBtn = document.getElementById(\n    \"copyToClipboard\"\n  ) as HTMLButtonElement;\n  const outputTextarea = document.getElementById(\n    \"outputResult\"\n  ) as HTMLTextAreaElement;\n\n  document\n    .getElementById(\"themeToggle\")!\n    .addEventListener(\"click\", toggleDarkMode);\n\n  generateBtn.addEventListener(\"click\", handleGenerate);\n\n  function handleGenerate() {\n    const outputStatus = document.getElementById(\"outputStatus\") as HTMLDivElement;\n    const selectObjectNameElement = document.getElementById(\n      \"selectObjectName\"\n    ) as HTMLSelectElement;\n\n    const selectedObjectName = selectObjectNameElement.value;\n\n    const radius = (document.getElementById(\"radiusValue\") as HTMLInputElement)\n      .value;\n    const numObjects = (\n      document.getElementById(\"numObjectsValue\") as HTMLInputElement\n    ).value;\n    const uniformScale = (\n      document.getElementById(\"uniformScaleValue\") as HTMLInputElement\n    ).value;\n\n    const inputData = (\n      document.getElementById(\"inputObjects\") as HTMLTextAreaElement\n    ).value;\n\n    try {\n      const parser = new GameConfigParser(inputData ?? \"\");\n      const objects = parser.parse();\n  \n      const outputItems: Array<string> = [];\n      let totalObjects = 0;\n      for (const object of objects) {\n        const myObject = object.properties as unknown as ObjectProperties;\n        const circle = generateCircle({\n          name: selectedObjectName,\n          radius: parseFloat(radius),\n          centerLoc: {x: parseFloat(myObject.loc[0]), y: parseFloat(myObject.loc[1]), z: parseFloat(myObject.loc[2])},\n          count: parseInt(numObjects),\n          uniform_scale: parseFloat(uniformScale),\n          quat: { w: parseFloat(myObject.quat[0]), x: parseFloat(myObject.quat[1][0]), y: parseFloat(myObject.quat[1][1]), z: parseFloat(myObject.quat[1][2])}\n        });\n        outputItems.push(circleToString(circle));\n        totalObjects += circle.length;\n      }\n      outputTextarea.value = outputItems.join(\"\\n\\n\");\n      outputStatus.innerText = `Generated ${totalObjects} objects. Copy this to Object_Data.txt.`;\n    } catch (e) {\n      outputStatus.innerText = `Error: ${e}`;\n      throw e;\n    }\n  }\n\n  copyBtn.addEventListener(\"click\", function (): void {\n    outputTextarea.select();\n    document.execCommand(\"copy\");\n\n    const originalText = this.textContent as string;\n    this.textContent = \"Copied!\";\n    this.classList.add(\"text-green-600\", \"dark:text-green-400\");\n\n    setTimeout(() => {\n      this.textContent = originalText;\n      this.classList.remove(\"text-green-600\", \"dark:text-green-400\");\n    }, 2000);\n  });\n});\n\nfunction toggleDarkMode(): void {\n  const html = document.documentElement;\n  html.classList.toggle(\"dark\");\n  localStorage.setItem(\"darkMode\", html.classList.contains(\"dark\").toString());\n}\n\ninterface ObjectProperties {\n  uniform_scale: string;\n  loc: [string, string, string];\n  quat: [string, [string, string, string]];\n}"],"mappings":"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"}